-- ============================================================
-- File Name: IP_telemetre_us_HC_SR04.vhd
-- Description: Telemetre a ultrason HC-SR04
-- ============================================================

LIBRARY ieee;
USE ieee.std_logic_1164.all; 
USE ieee.numeric_std.all;

ENTITY DF9GMS IS 			--déclaration des entrées
	Generic (  Fclock : positive := 50E6); -- System Clock Freq in Hertz
	PORT
	(
	RST_n		:  IN  STD_LOGIC;
	CLK 	:  IN  STD_LOGIC;
	trig  : out std_logic;
	echo  : in std_logic;
	led   : out std_logic_vector (7 downto 0);   -- durée de l'echo en cm (affichage sur les LEDs)
	--Interface avec le bus Avalon
	read_data : out std_logic_vector (15 downto 0);	-- durée de l'echo en cm 			
	read_enable :in std_logic;
	chip_select : in std_logic
);		
end entity;

ARCHITECTURE RTL OF telemetre_us_HC_SR04 IS


signal Tick1us :  std_logic;										--signal ticck1us
signal dure_echo : std_logic_vector (15 downto 0); 					--signal duré de l'écho

Type StateType is (E0, E1, E2, E3, E4, E5, E6, E7, E8,E9);		-- Déclaration des états de notre MAE
signal State : StateType;
signal cmpt : integer range 0 to 200000;					--compteur de µs
signal cmpt_tot : integer range 0 to 200000;				--compteur de µs
signal pwm : integer range 0 to 2;				--compteur de µs
signal inverse : std_logic;
signal rst : std_logic;
constant Divisor_us : positive := Fclock  / 1E3;
signal Count1     : integer range 0 to Divisor_us;
signal echo_r, echo_rr : std_logic;

begin

rst <= not rst_n;

--Very Simple Avalon bus decoder
process(clk, rst)
begin
if rst = '1' then 
Read_data <= (others => '0');
elsif rising_edge(clk) then 	
if (chip_select = '1') and (read_enable = '1') then 
Read_data <= dure_echo;
end if; 
end if; 
end process;

-- process generate the Tick1us (One clock period Tick each 1 us)
process (RST,CLK)
begin
if RST='1' then
Count1     <= 0;
Tick1us  <= '0';
echo_r <= '0';
echo_rr <= '0';
elsif rising_edge (CLK) then
echo_r <= echo;      -- resynchronisation du signal echo
echo_rr <= echo_r;   -- resynchronisation du signal echo

Tick1us  <= '0';
if Count1 < Divisor_us-1 then
Count1 <= Count1 + 1;
else
Count1 <= 0;
Tick1us <= '1';
end if;
end if;
end process;


-- MAE de generation du trige de 10 us toute les 60 ms  
process (Clk,Rst)

begin
if Rst='1' then															
State <= E0;			--état initial
inverse <= '0';
pwm <= 1;
trig <= '0';			-- trig a l'état bas
cmpt <= 0;
dure_echo <=(others => '0');
elsif rising_edge(Clk) then												

case State is

--------------------- E0 ---------------------			
when E0 =>		
--led <= "00000000";
cmpt_tot <= 0;
State <= E1;
--------------------- E1 ---------------------			
when E1 =>						--état initial
--led <= "00000001";
cmpt <= 0;	
trig <= '1';
State <= E2;
--------------------- E1 ---------------------	
when E2 =>
--led <= "00000010";
if cmpt = pwm then
State <= E3;			
trig <= '0';					-- Trig passe à zéro après 1 ms (fin du trig)
elsif Tick1us = '1' then
cmpt <= cmpt+1;					--incrémentation du compteur chaque 1 us
cmpt_tot <= cmpt_tot +1;					--incrémentation du compteur chaque 1 us
end if;
--------------------- E2 ---------------------		
when E3 =>
--led <= "00000100";
if cmpt = 20 then
State <= E4;			
elsif Tick1us = '1' then
cmpt <= cmpt+1;					--incrémentation du compteur chaque 1 us
cmpt_tot <= cmpt_tot +1;					--incrémentation du compteur chaque 1 us
end if;	
--------------------- E4 ---------------------			
when E4 =>
led <= "00001000";
if cmpt_tot = 1000 then
if inverse = '0' then
pwm <= 2;
inverse <= '1';
led(0) <= '1';
led(1) <= '0';
else
pwm <= 1;
inverse <= '0';
led(1) <= '1';
led(0) <= '0';
end if;
State <= E0;			
elsif Tick1us = '1' then		
State <= E1;
cmpt <= cmpt+1;					--incrémentation du compteur chaque 1 us
cmpt_tot <= cmpt_tot +1;					--incrémentation du compteur chaque 1 us
end if;	
--------------------- E4 ---------------------			
when others =>
State <= E0;			
end case;
end if;
end process;

END architecture;
